<?php
namespace app\modules\api\controllers;

use app\modules\api\models\db\BioUser;
use app\modules\api\models\forms\RegistrationForm;
use app\modules\api\models\forms\LoginForm;
use app\modules\api\models\forms\UploadForm;
use app\modules\api\models\db\BioDoctorPacientConnection;
use yii\base\Theme;
use yii\web\UploadedFile;
use app\modules\api\models\BioFileHelper;
use Yii;

class UserController extends _ApiController
{
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['corsFilter'] = [
            'class' => \yii\filters\Cors::className(),
            'cors' => [
                // restrict access to
                'Origin' => ['*'],
                'Access-Control-Request-Method' => ['POST', 'PUT'],
                // Allow only POST and PUT methods
                'Access-Control-Request-Headers' => ['X-Wsse'],
                // Allow only headers 'X-Wsse'
                'Access-Control-Allow-Credentials' => true,
                // Allow OPTIONS caching
                'Access-Control-Max-Age' => 3600,
                // Allow the X-Pagination-Current-Page header to be exposed to the browser.
                'Access-Control-Expose-Headers' => ['X-Pagination-Current-Page'],
            ],
        ];
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return $behaviors;
    }

    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex($access_token)
    {
        $user = BioUser::findByAccessToken($access_token);
        return $user;
    }

    public function actionLogin()
    {
        $model = new LoginForm();
        $model->setAttributes(Yii::$app->request->post());
        if ($model->validate()) {
            return [
                'success' => true,
                'user' => $model->getUser(),
            ];
        } else {
            return [
                'success' => false,
                'user' => $model->errors,
            ];
        }
    }


    public function actionUser()
    {
        if(!empty($this->user)){
            return [
                'success' => true,
                'user' => $this->user->getUser($this->user->username),
            ];
        } else {
            return [
                'success' => false,
            ];
        }
    }

    public function actionRegister()
    {
        $scenario = Yii::$app->request->post('type') == 'doctor' ? 'doctor' : 'pacient';
        $model = new RegistrationForm(['scenario' => $scenario]);
        $model->setAttributes(Yii::$app->request->post());
        if ($model->validate() && $model->register()) {
            return [
                'success' => true,
                'user' => $model->getUserInfo(),
            ];
        } else {
            return [
                'success' => false,
                'errors' => $model->getErrors(),
            ];
        }
    }

    public function actionUpload()
    {
        if (Yii::$app->request->isPost) {
            $dir = BioUser::getPhotoPath($this->user->path_key);
            BioFileHelper::deleteMainSymbols($dir); // create if not exist inside
            if(copy($_FILES["file"]["tmp_name"], $dir . '/'. $_FILES["file"]["name"])){
                return [
                    'success' => true,
                ];
            } else {
                return [
                    'success' => false,
                ];
            }
        }
    }

    // доработать завтра формат отсылаемых данных и работу с токеном, без токена посылать в жопец

    public function actionCreateconnectionrequest()
    {
        $model = new BioDoctorPacientConnection();
        $model->setAttributes(Yii::$app->request->post());
        if ($model->validate() && $model->save()) {
            return [
                'success' => true,
                'connectionInfo' => $model->attributes
            ];
        } else {
            return [
                'success' => false,
                'errors' => $model->getErrors(),
            ];
        }
    }

    public function actionApproveconnection()
    {
        $model = new BioDoctorPacientConnection();
        $model->setAttributes(Yii::$app->request->post());
        $result = $model->findByPacientAndDoctor();
        if($result){
            $result->approved = 1;
            $result->save();
            return [
                'success' => true,
                'connectionInfo' => $result->attributes
            ];
        } else {
            return [
                'success' => false,
                'errors' => 'Connect does not exist'
            ];
        }
    }

    public function actionGetdoctorspacients()
    {
        if(!empty(Yii::$app->request->post('doctor_id'))) {
            $pacientList = BioDoctorPacientConnection::findAll(['doctor_id' => Yii::$app->request->post('doctor_id')]);
            if(!empty($pacientList)){
                return [
                    'success' => true,
                    'errors' => $pacientList
                ];
            } else{
                return [
                    'success' => false,
                    'errors' => 'doctor_id can not be blank'
                ];
            }
        } else {
            return [
                'success' => false,
                'errors' => 'No results'
            ];
        }
    }
}